/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;
import GUI.Interfaz;
import Modelos.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\3\1\2\1\44\1\3\1\1\16\30\4\0\1\15\1\5"+
    "\1\31\1\34\1\35\1\37\1\34\1\24\2\34\1\6\1\20\1\33"+
    "\1\43\1\17\1\10\12\26\1\42\1\41\1\4\1\34\1\7\1\20"+
    "\1\34\2\25\1\11\6\25\1\14\3\25\1\13\1\12\13\25\1\34"+
    "\1\21\2\34\1\35\1\34\2\25\1\11\6\25\1\14\3\25\1\13"+
    "\1\12\13\25\1\40\1\17\1\36\1\16\6\30\1\45\32\30\2\0"+
    "\4\27\4\0\1\27\2\0\1\30\7\0\1\27\4\0\1\27\5\0"+
    "\27\27\1\0\37\27\1\0\u01ca\27\4\0\14\27\16\0\5\27\7\0"+
    "\1\27\1\0\1\27\21\0\160\30\5\27\1\0\2\27\2\0\4\27"+
    "\10\0\1\27\1\0\3\27\1\0\1\27\1\0\24\27\1\0\123\27"+
    "\1\0\213\27\1\0\5\30\2\0\236\27\11\0\46\27\2\0\1\27"+
    "\7\0\47\27\7\0\1\27\1\0\55\30\1\0\1\30\1\0\2\30"+
    "\1\0\2\30\1\0\1\30\10\0\33\27\5\0\3\27\15\0\5\30"+
    "\6\0\1\27\4\0\13\30\5\0\53\27\37\30\4\0\2\27\1\30"+
    "\143\27\1\0\1\27\10\30\1\0\6\30\2\27\2\30\1\0\4\30"+
    "\2\27\12\30\3\27\2\0\1\27\17\0\1\30\1\27\1\30\36\27"+
    "\33\30\2\0\131\27\13\30\1\27\16\0\12\30\41\27\11\30\2\27"+
    "\4\0\1\27\5\0\26\27\4\30\1\27\11\30\1\27\3\30\1\27"+
    "\5\30\22\0\31\27\3\30\104\0\1\27\1\0\13\27\67\0\33\30"+
    "\1\0\4\30\66\27\3\30\1\27\22\30\1\27\7\30\12\27\2\30"+
    "\2\0\12\30\1\0\7\27\1\0\7\27\1\0\3\30\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\1\27\3\0\4\27"+
    "\2\0\1\30\1\27\7\30\2\0\2\30\2\0\3\30\1\27\10\0"+
    "\1\30\4\0\2\27\1\0\3\27\2\30\2\0\12\30\4\27\7\0"+
    "\1\27\5\0\3\30\1\0\6\27\4\0\2\27\2\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\27\1\0\2\27\2\0\1\30\1\0"+
    "\5\30\4\0\2\30\2\0\3\30\3\0\1\30\7\0\4\27\1\0"+
    "\1\27\7\0\14\30\3\27\1\30\13\0\3\30\1\0\11\27\1\0"+
    "\3\27\1\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0"+
    "\1\30\1\27\10\30\1\0\3\30\1\0\3\30\2\0\1\27\17\0"+
    "\2\27\2\30\2\0\12\30\1\0\1\27\17\0\3\30\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27"+
    "\2\0\1\30\1\27\7\30\2\0\2\30\2\0\3\30\10\0\2\30"+
    "\4\0\2\27\1\0\3\27\2\30\2\0\12\30\1\0\1\27\20\0"+
    "\1\30\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0\2\27"+
    "\1\0\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0\14\27"+
    "\4\0\5\30\3\0\3\30\1\0\4\30\2\0\1\27\6\0\1\30"+
    "\16\0\12\30\11\0\1\27\7\0\3\30\1\0\10\27\1\0\3\27"+
    "\1\0\27\27\1\0\12\27\1\0\5\27\3\0\1\27\7\30\1\0"+
    "\3\30\1\0\4\30\7\0\2\30\1\0\2\27\6\0\2\27\2\30"+
    "\2\0\12\30\22\0\2\30\1\0\10\27\1\0\3\27\1\0\27\27"+
    "\1\0\12\27\1\0\5\27\2\0\1\30\1\27\7\30\1\0\3\30"+
    "\1\0\4\30\7\0\2\30\7\0\1\27\1\0\2\27\2\30\2\0"+
    "\12\30\1\0\2\27\17\0\2\30\1\0\10\27\1\0\3\27\1\0"+
    "\51\27\2\0\1\27\7\30\1\0\3\30\1\0\4\30\1\27\10\0"+
    "\1\30\10\0\2\27\2\30\2\0\12\30\12\0\6\27\2\0\2\30"+
    "\1\0\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0\7\27"+
    "\3\0\1\30\4\0\6\30\1\0\1\30\1\0\10\30\22\0\2\30"+
    "\15\0\60\27\1\30\2\27\7\30\4\0\10\27\10\30\1\0\12\30"+
    "\47\0\2\27\1\0\1\27\2\0\2\27\1\0\1\27\2\0\1\27"+
    "\6\0\4\27\1\0\7\27\1\0\3\27\1\0\1\27\1\0\1\27"+
    "\2\0\2\27\1\0\4\27\1\30\2\27\6\30\1\0\2\30\1\27"+
    "\2\0\5\27\1\0\1\27\1\0\6\30\2\0\12\30\2\0\4\27"+
    "\40\0\1\27\27\0\2\30\6\0\12\30\13\0\1\30\1\0\1\30"+
    "\1\0\1\30\4\0\2\30\10\27\1\0\44\27\4\0\24\30\1\0"+
    "\2\30\5\27\13\30\1\0\44\30\11\0\1\30\71\0\53\27\24\30"+
    "\1\27\12\30\6\0\6\27\4\30\4\27\3\30\1\27\3\30\2\27"+
    "\7\30\3\27\4\30\15\27\14\30\1\27\17\30\2\0\46\27\1\0"+
    "\1\27\5\0\1\27\2\0\53\27\1\0\u014d\27\1\0\4\27\2\0"+
    "\7\27\1\0\1\27\1\0\4\27\2\0\51\27\1\0\4\27\2\0"+
    "\41\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27\2\0"+
    "\17\27\1\0\71\27\1\0\4\27\2\0\103\27\2\0\3\30\40\0"+
    "\20\27\20\0\125\27\14\0\u026c\27\2\0\21\27\1\0\32\27\5\0"+
    "\113\27\3\0\3\27\17\0\15\27\1\0\4\27\3\30\13\0\22\27"+
    "\3\30\13\0\22\27\2\30\14\0\15\27\1\0\3\27\1\0\2\30"+
    "\14\0\64\27\40\30\3\0\1\27\3\0\2\27\1\30\2\0\12\30"+
    "\41\0\3\30\2\0\12\30\6\0\130\27\10\0\51\27\1\30\1\27"+
    "\5\0\106\27\12\0\35\27\3\0\14\30\4\0\14\30\12\0\12\30"+
    "\36\27\2\0\5\27\13\0\54\27\4\0\21\30\7\27\2\30\6\0"+
    "\12\30\46\0\27\27\5\30\4\0\65\27\12\30\1\0\35\30\2\0"+
    "\13\30\6\0\12\30\15\0\1\27\130\0\5\30\57\27\21\30\7\27"+
    "\4\0\12\30\21\0\11\30\14\0\3\30\36\27\15\30\2\27\12\30"+
    "\54\27\16\30\14\0\44\27\24\30\10\0\12\30\3\0\3\27\12\30"+
    "\44\27\122\0\3\30\1\0\25\30\4\27\1\30\4\27\3\30\2\27"+
    "\11\0\300\27\47\30\25\0\4\30\u0116\27\2\0\6\27\2\0\46\27"+
    "\2\0\6\27\2\0\10\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\37\27\2\0\65\27\1\0\7\27\1\0\1\27\3\0\3\27"+
    "\1\0\7\27\3\0\4\27\2\0\6\27\4\0\15\27\5\0\3\27"+
    "\1\0\7\27\16\0\5\30\11\0\1\22\2\0\1\32\1\23\12\0"+
    "\1\44\1\44\5\30\20\0\2\27\23\0\1\27\13\0\5\30\5\0"+
    "\6\30\1\0\1\27\15\0\1\27\20\0\15\27\3\0\33\27\25\0"+
    "\15\30\4\0\1\30\3\0\14\30\21\0\1\27\4\0\1\27\2\0"+
    "\12\27\1\0\1\27\3\0\5\27\6\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0"+
    "\1\27\21\0\51\27\u0a77\0\57\27\1\0\57\27\1\0\205\27\6\0"+
    "\4\27\3\30\2\27\14\0\46\27\1\0\1\27\5\0\1\27\2\0"+
    "\70\27\7\0\1\27\17\0\1\30\27\27\11\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\40\30\57\0\1\27\u01d5\0\3\27\31\0\11\27"+
    "\6\30\1\0\5\27\2\0\5\27\4\0\126\27\2\0\2\30\2\0"+
    "\3\27\1\0\132\27\1\0\4\27\5\0\51\27\3\0\136\27\21\0"+
    "\33\27\65\0\20\27\u0200\0\u19b6\27\112\0\u51cd\27\63\0\u048d\27\103\0"+
    "\56\27\2\0\u010d\27\3\0\20\27\12\30\2\27\24\0\57\27\1\30"+
    "\4\0\12\30\1\0\31\27\7\0\1\30\120\27\2\30\45\0\11\27"+
    "\2\0\147\27\2\0\4\27\1\0\4\27\14\0\13\27\115\0\12\27"+
    "\1\30\3\27\1\30\4\27\1\30\27\27\5\30\20\0\1\27\7\0"+
    "\64\27\14\0\2\30\62\27\21\30\13\0\12\30\6\0\22\30\6\27"+
    "\3\0\1\27\4\0\12\30\34\27\10\30\2\0\27\27\15\30\14\0"+
    "\35\27\3\0\4\30\57\27\16\30\16\0\1\27\12\30\46\0\51\27"+
    "\16\30\11\0\3\27\1\30\10\27\2\30\2\0\12\30\6\0\27\27"+
    "\3\0\1\27\1\30\4\0\60\27\1\30\1\27\3\30\2\27\2\30"+
    "\5\27\2\30\1\27\1\30\1\27\30\0\3\27\2\0\13\27\5\30"+
    "\2\0\3\27\2\30\12\0\6\27\2\0\6\27\2\0\6\27\11\0"+
    "\7\27\1\0\7\27\221\0\43\27\10\30\1\0\2\30\2\0\12\30"+
    "\6\0\u2ba4\27\14\0\27\27\4\0\61\27\u2104\0\u016e\27\2\0\152\27"+
    "\46\0\7\27\14\0\5\27\5\0\1\27\1\30\12\27\1\0\15\27"+
    "\1\0\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\154\27"+
    "\41\0\u016b\27\22\0\100\27\2\0\66\27\50\0\15\27\3\0\20\30"+
    "\20\0\7\30\14\0\2\27\30\0\3\27\31\0\1\27\6\0\5\27"+
    "\1\0\207\27\2\0\1\30\4\0\1\27\13\0\12\30\7\0\32\27"+
    "\4\0\1\27\1\0\32\27\13\0\131\27\3\0\6\27\2\0\6\27"+
    "\2\0\6\27\2\0\3\27\3\0\2\27\3\0\2\27\22\0\3\30"+
    "\4\0\14\27\1\0\32\27\1\0\23\27\1\0\2\27\1\0\17\27"+
    "\2\0\16\27\42\0\173\27\105\0\65\27\210\0\1\30\202\0\35\27"+
    "\3\0\61\27\57\0\37\27\21\0\33\27\65\0\36\27\2\0\44\27"+
    "\4\0\10\27\1\0\5\27\52\0\236\27\2\0\12\30\u0356\0\6\27"+
    "\2\0\1\27\1\0\54\27\1\0\2\27\3\0\1\27\2\0\27\27"+
    "\252\0\26\27\12\0\32\27\106\0\70\27\6\0\2\27\100\0\1\27"+
    "\3\30\1\0\2\30\5\0\4\30\4\27\1\0\3\27\1\0\33\27"+
    "\4\0\3\30\4\0\1\30\40\0\35\27\203\0\66\27\12\0\26\27"+
    "\12\0\23\27\215\0\111\27\u03b7\0\3\30\65\27\17\30\37\0\12\30"+
    "\20\0\3\30\55\27\13\30\2\0\1\30\22\0\31\27\7\0\12\30"+
    "\6\0\3\30\44\27\16\30\1\0\12\30\100\0\3\30\60\27\16\30"+
    "\4\27\13\0\12\30\u04a6\0\53\27\15\30\10\0\12\30\u0936\0\u036f\27"+
    "\221\0\143\27\u0b9d\0\u042f\27\u33d1\0\u0239\27\u04c7\0\105\27\13\0\1\27"+
    "\56\30\20\0\4\30\15\27\u4060\0\2\27\u2163\0\5\30\3\0\26\30"+
    "\2\0\7\30\36\0\4\30\224\0\3\30\u01bb\0\125\27\1\0\107\27"+
    "\1\0\2\27\2\0\1\27\2\0\2\27\2\0\4\27\1\0\14\27"+
    "\1\0\1\27\1\0\7\27\1\0\101\27\1\0\4\27\2\0\10\27"+
    "\1\0\7\27\1\0\34\27\1\0\4\27\1\0\5\27\1\0\1\27"+
    "\3\0\7\27\1\0\u0154\27\2\0\31\27\1\0\31\27\1\0\37\27"+
    "\1\0\31\27\1\0\37\27\1\0\31\27\1\0\37\27\1\0\31\27"+
    "\1\0\37\27\1\0\31\27\1\0\10\27\2\0\62\30\u1600\0\4\27"+
    "\1\0\33\27\1\0\2\27\1\0\1\27\2\0\1\27\1\0\12\27"+
    "\1\0\4\27\1\0\1\27\1\0\1\27\6\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0\1\27"+
    "\2\0\1\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\2\27\1\0\1\27\2\0\4\27\1\0\7\27\1\0\4\27"+
    "\1\0\4\27\1\0\1\27\1\0\12\27\1\0\21\27\5\0\3\27"+
    "\1\0\5\27\1\0\21\27\u1144\0\ua6d7\27\51\0\u1035\27\13\0\336\27"+
    "\u3fe2\0\u021e\27\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\30\36\0\140\30\200\0\360\30\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\2\4\1\5\1\4"+
    "\2\6\1\2\1\7\1\4\1\10\1\6\1\4\1\1"+
    "\1\4\1\11\1\4\1\12\1\13\1\14\1\4\4\0"+
    "\1\5\1\2\1\6\3\0\1\5\2\0\1\7\1\11"+
    "\1\0\1\12\1\13\1\14\1\0\1\7\1\15\6\0"+
    "\1\16\2\0\1\11\4\0\1\12\1\13\1\14\1\17"+
    "\3\0\3\4\1\6\2\20\1\0\2\10\3\4\4\0"+
    "\1\21\1\0\1\2\1\22\3\0\1\23\1\22\1\0"+
    "\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\46\0\46\0\162\0\230\0\276"+
    "\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e"+
    "\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\46\0\u0688"+
    "\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\46\0\u076c\0\u023a"+
    "\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c"+
    "\0\u08c2\0\u08e8\0\u090e\0\u0934\0\46\0\u03b6\0\u095a\0\u0980"+
    "\0\46\0\u09a6\0\u09cc\0\46\0\u09f2\0\u06fa\0\u0746\0\u0a18"+
    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u090e\0\u0b22"+
    "\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\3\13\1\14\1\2\1\15\1\10\1\16"+
    "\2\2\1\7\1\13\1\17\1\20\1\2\1\21\1\22"+
    "\2\7\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\52\0\1\5\50\0\1\32\7\0\1\33\1\34\14\0"+
    "\1\35\27\0\1\33\1\34\14\0\1\35\27\0\1\36"+
    "\1\34\14\0\1\35\22\0\1\37\4\0\1\33\1\34"+
    "\14\0\1\35\23\0\1\20\1\40\2\20\1\41\1\42"+
    "\6\0\4\20\2\0\1\43\1\0\1\20\7\0\1\20"+
    "\11\0\4\20\1\41\1\42\6\0\4\20\2\0\1\43"+
    "\1\0\1\20\7\0\1\20\6\0\1\44\2\0\1\45"+
    "\3\0\1\46\1\34\1\47\1\44\12\0\1\35\2\0"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\17\0\1\56"+
    "\1\34\14\0\1\35\25\0\1\57\1\0\1\33\1\34"+
    "\3\0\3\57\6\0\1\35\27\0\1\60\1\61\14\0"+
    "\1\62\23\0\4\20\10\0\4\20\4\0\1\20\7\0"+
    "\1\20\15\63\1\64\1\65\12\63\1\66\1\63\1\67"+
    "\12\63\23\70\1\66\22\70\11\0\4\20\1\33\1\34"+
    "\6\0\4\20\2\0\1\35\1\0\1\20\7\0\1\20"+
    "\15\0\1\71\1\34\14\0\1\35\13\0\2\72\12\0"+
    "\1\73\1\34\14\0\1\35\3\0\1\74\17\0\4\75"+
    "\1\76\1\34\6\0\1\75\1\0\1\75\3\0\1\35"+
    "\1\0\1\75\25\0\1\77\1\34\14\0\1\35\27\0"+
    "\1\100\1\34\14\0\1\35\21\0\1\101\5\0\1\102"+
    "\1\34\14\0\1\35\12\0\5\103\1\104\1\0\37\103"+
    "\15\0\1\33\1\34\33\0\5\105\4\0\1\106\1\0"+
    "\3\105\2\0\1\105\4\0\1\105\1\0\11\105\6\0"+
    "\5\107\4\0\1\107\1\0\3\107\2\0\1\107\4\0"+
    "\1\107\1\0\11\107\17\0\1\36\1\34\27\0\1\37"+
    "\1\3\1\5\43\37\11\0\2\20\1\110\1\20\10\0"+
    "\4\20\4\0\1\20\7\0\1\20\15\0\1\41\1\42"+
    "\40\0\4\111\1\42\7\0\1\111\31\0\4\112\10\0"+
    "\1\112\35\0\1\44\42\0\1\113\41\0\1\44\2\0"+
    "\1\45\3\0\1\46\1\34\1\47\1\44\15\0\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\17\0\1\47\45\0"+
    "\1\50\31\0\2\72\12\0\1\51\21\0\1\74\17\0"+
    "\4\75\1\52\7\0\1\75\1\0\1\75\5\0\1\75"+
    "\25\0\1\53\45\0\1\54\37\0\1\101\5\0\1\55"+
    "\45\0\1\56\1\34\44\0\1\60\1\61\44\0\1\61"+
    "\10\0\1\114\45\0\1\115\17\0\31\63\1\66\31\63"+
    "\1\64\1\65\12\63\1\66\20\63\5\116\4\63\1\117"+
    "\1\63\3\116\2\63\1\116\4\63\1\105\1\63\11\116"+
    "\6\63\5\120\4\63\1\120\1\63\3\120\2\63\1\120"+
    "\4\63\1\107\1\63\11\120\2\63\15\0\1\71\1\34"+
    "\30\0\2\72\12\0\1\121\21\0\1\74\7\0\2\72"+
    "\12\0\1\73\1\34\20\0\1\74\7\0\2\122\12\0"+
    "\1\74\21\0\1\123\17\0\4\75\1\124\7\0\4\75"+
    "\4\0\1\75\1\125\6\0\1\75\11\0\4\75\1\76"+
    "\1\34\6\0\1\75\1\0\1\75\5\0\1\75\25\0"+
    "\1\77\1\34\44\0\1\100\1\34\44\0\1\101\37\0"+
    "\1\101\5\0\1\102\1\34\27\0\5\103\1\126\45\103"+
    "\1\126\1\103\1\127\36\103\33\0\1\35\23\0\3\20"+
    "\1\130\10\0\4\20\4\0\1\20\7\0\1\20\33\0"+
    "\1\43\25\0\1\131\65\0\1\62\12\0\31\63\1\66"+
    "\1\63\1\67\12\63\15\0\1\121\21\0\1\74\7\0"+
    "\2\122\12\0\1\132\21\0\1\123\7\0\2\133\12\0"+
    "\1\123\21\0\1\134\23\0\1\124\20\0\1\125\24\0"+
    "\1\125\30\0\5\103\1\126\1\103\1\5\36\103\11\0"+
    "\4\20\1\135\7\0\4\20\4\0\1\20\7\0\1\20"+
    "\14\0\1\135\46\0\1\132\21\0\1\123\7\0\2\133"+
    "\12\0\1\136\21\0\1\134\7\0\2\137\12\0\1\134"+
    "\45\0\1\135\45\0\1\136\21\0\1\134\7\0\2\137"+
    "\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3154];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\24\1\4\0\3\1\3\0"+
    "\1\1\2\0\2\1\1\0\3\1\1\0\1\1\1\11"+
    "\6\0\1\11\2\0\1\1\4\0\4\1\3\0\1\11"+
    "\3\1\1\11\1\1\1\0\1\11\4\1\4\0\1\1"+
    "\1\0\2\1\3\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
      StringBuffer string = new StringBuffer();

      private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
      }
      private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2844) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1));
            GUI.Interfaz.texto_consola+="<<<Se encontraron errores léxicos en la entrada>>>\n";
            Modelos.Errores.lista_errores.add(new Errores("Léxico", yytext(), (yyline+1), (yycolumn+1)));
            } 
            // fall through
          case 20: break;
          case 2: 
            { /*Se ignoran*/
            } 
            // fall through
          case 21: break;
          case 3: 
            { yycolumn=1;
            } 
            // fall through
          case 22: break;
          case 4: 
            { //System.out.println("NOTACION SIMBOLO: "+yytext());
    return new Symbol(sym.notacionA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 23: break;
          case 5: 
            { Expresiones.add(yytext()); return new Symbol(sym.multiplicativo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 24: break;
          case 6: 
            { //System.out.println("ID: "+yytext());
    return new Symbol(sym.id,yycolumn,yyline,yytext());
            } 
            // fall through
          case 25: break;
          case 7: 
            { Expresiones.add(yytext()); return new Symbol(sym.operador,yycolumn,yyline,yytext());
            } 
            // fall through
          case 26: break;
          case 8: 
            { //System.out.println("NOTACION DIGITO: "+yytext());
    return new Symbol(sym.notacionD,yycolumn,yyline,yytext());
            } 
            // fall through
          case 27: break;
          case 9: 
            { return new Symbol(sym.lcierra,yycolumn,yyline,yytext());
            } 
            // fall through
          case 28: break;
          case 10: 
            { return new Symbol(sym.labre,yycolumn,yyline,yytext());
            } 
            // fall through
          case 29: break;
          case 11: 
            { return new Symbol(sym.pcoma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 30: break;
          case 12: 
            { return new Symbol(sym.dospuntos,yycolumn,yyline,yytext());
            } 
            // fall through
          case 31: break;
          case 13: 
            { Expresiones.add(yytext());
    System.out.println("ESPECIAL: "+yytext());
    return new Symbol(sym.especial,yycolumn,yyline,yytext());
            } 
            // fall through
          case 32: break;
          case 14: 
            { Expresiones.add(yytext());
    //System.out.println("LEXEMA: "+yytext());
    return new Symbol(sym.lexema,yycolumn,yyline,yytext());
            } 
            // fall through
          case 33: break;
          case 15: 
            { return new Symbol(sym.deriva,yycolumn,yyline,yytext());
            } 
            // fall through
          case 34: break;
          case 16: 
            { //System.out.println("NOTACION LETRA: "+yytext());
    return new Symbol(sym.notacionL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 35: break;
          case 17: 
            { Expresiones.add(yytext());
    //System.out.println("CONJUNTO: "+yytext());
    return new Symbol(sym.conjuntoo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 36: break;
          case 18: 
            { return new Symbol(sym.prconj,yycolumn,yyline,yytext());
            } 
            // fall through
          case 37: break;
          case 19: 
            { return new Symbol(sym.porcentajes,yycolumn,yyline,yytext());
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
