/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\4\1\2\1\23\1\3\1\1\16\21\4\0\1\32\1\6"+
    "\1\22\1\31\1\33\1\35\4\31\1\7\1\36\1\30\1\42\1\36"+
    "\1\11\12\17\1\41\1\40\1\5\1\31\1\10\1\36\1\31\2\16"+
    "\1\12\6\16\1\15\3\16\1\14\1\13\13\16\4\31\1\33\1\31"+
    "\2\16\1\12\6\16\1\15\3\16\1\14\1\13\13\16\1\37\1\36"+
    "\1\34\1\27\6\21\1\24\32\21\2\0\4\20\4\0\1\20\2\0"+
    "\1\21\7\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0"+
    "\u01ca\20\4\0\14\20\16\0\5\20\7\0\1\20\1\0\1\20\21\0"+
    "\160\21\5\20\1\0\2\20\2\0\4\20\10\0\1\20\1\0\3\20"+
    "\1\0\1\20\1\0\24\20\1\0\123\20\1\0\213\20\1\0\5\21"+
    "\2\0\236\20\11\0\46\20\2\0\1\20\7\0\47\20\7\0\1\20"+
    "\1\0\55\21\1\0\1\21\1\0\2\21\1\0\2\21\1\0\1\21"+
    "\10\0\33\20\5\0\3\20\15\0\5\21\6\0\1\20\4\0\13\21"+
    "\5\0\53\20\37\21\4\0\2\20\1\21\143\20\1\0\1\20\10\21"+
    "\1\0\6\21\2\20\2\21\1\0\4\21\2\20\12\21\3\20\2\0"+
    "\1\20\17\0\1\21\1\20\1\21\36\20\33\21\2\0\131\20\13\21"+
    "\1\20\16\0\12\21\41\20\11\21\2\20\4\0\1\20\5\0\26\20"+
    "\4\21\1\20\11\21\1\20\3\21\1\20\5\21\22\0\31\20\3\21"+
    "\104\0\1\20\1\0\13\20\67\0\33\21\1\0\4\21\66\20\3\21"+
    "\1\20\22\21\1\20\7\21\12\20\2\21\2\0\12\21\1\0\7\20"+
    "\1\0\7\20\1\0\3\21\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\1\20\3\0\4\20\2\0\1\21\1\20\7\21"+
    "\2\0\2\21\2\0\3\21\1\20\10\0\1\21\4\0\2\20\1\0"+
    "\3\20\2\21\2\0\12\21\4\20\7\0\1\20\5\0\3\21\1\0"+
    "\6\20\4\0\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0"+
    "\2\20\1\0\2\20\2\0\1\21\1\0\5\21\4\0\2\21\2\0"+
    "\3\21\3\0\1\21\7\0\4\20\1\0\1\20\7\0\14\21\3\20"+
    "\1\21\13\0\3\21\1\0\11\20\1\0\3\20\1\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20\10\21\1\0"+
    "\3\21\1\0\3\21\2\0\1\20\17\0\2\20\2\21\2\0\12\21"+
    "\1\0\1\20\17\0\3\21\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20\7\21"+
    "\2\0\2\21\2\0\3\21\10\0\2\21\4\0\2\20\1\0\3\20"+
    "\2\21\2\0\12\21\1\0\1\20\20\0\1\21\1\20\1\0\6\20"+
    "\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20"+
    "\3\0\2\20\3\0\3\20\3\0\14\20\4\0\5\21\3\0\3\21"+
    "\1\0\4\21\2\0\1\20\6\0\1\21\16\0\12\21\11\0\1\20"+
    "\7\0\3\21\1\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20"+
    "\1\0\5\20\3\0\1\20\7\21\1\0\3\21\1\0\4\21\7\0"+
    "\2\21\1\0\2\20\6\0\2\20\2\21\2\0\12\21\22\0\2\21"+
    "\1\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20"+
    "\2\0\1\21\1\20\7\21\1\0\3\21\1\0\4\21\7\0\2\21"+
    "\7\0\1\20\1\0\2\20\2\21\2\0\12\21\1\0\2\20\17\0"+
    "\2\21\1\0\10\20\1\0\3\20\1\0\51\20\2\0\1\20\7\21"+
    "\1\0\3\21\1\0\4\21\1\20\10\0\1\21\10\0\2\20\2\21"+
    "\2\0\12\21\12\0\6\20\2\0\2\21\1\0\22\20\3\0\30\20"+
    "\1\0\11\20\1\0\1\20\2\0\7\20\3\0\1\21\4\0\6\21"+
    "\1\0\1\21\1\0\10\21\22\0\2\21\15\0\60\20\1\21\2\20"+
    "\7\21\4\0\10\20\10\21\1\0\12\21\47\0\2\20\1\0\1\20"+
    "\2\0\2\20\1\0\1\20\2\0\1\20\6\0\4\20\1\0\7\20"+
    "\1\0\3\20\1\0\1\20\1\0\1\20\2\0\2\20\1\0\4\20"+
    "\1\21\2\20\6\21\1\0\2\21\1\20\2\0\5\20\1\0\1\20"+
    "\1\0\6\21\2\0\12\21\2\0\4\20\40\0\1\20\27\0\2\21"+
    "\6\0\12\21\13\0\1\21\1\0\1\21\1\0\1\21\4\0\2\21"+
    "\10\20\1\0\44\20\4\0\24\21\1\0\2\21\5\20\13\21\1\0"+
    "\44\21\11\0\1\21\71\0\53\20\24\21\1\20\12\21\6\0\6\20"+
    "\4\21\4\20\3\21\1\20\3\21\2\20\7\21\3\20\4\21\15\20"+
    "\14\21\1\20\17\21\2\0\46\20\1\0\1\20\5\0\1\20\2\0"+
    "\53\20\1\0\u014d\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0"+
    "\4\20\2\0\51\20\1\0\4\20\2\0\41\20\1\0\4\20\2\0"+
    "\7\20\1\0\1\20\1\0\4\20\2\0\17\20\1\0\71\20\1\0"+
    "\4\20\2\0\103\20\2\0\3\21\40\0\20\20\20\0\125\20\14\0"+
    "\u026c\20\2\0\21\20\1\0\32\20\5\0\113\20\3\0\3\20\17\0"+
    "\15\20\1\0\4\20\3\21\13\0\22\20\3\21\13\0\22\20\2\21"+
    "\14\0\15\20\1\0\3\20\1\0\2\21\14\0\64\20\40\21\3\0"+
    "\1\20\3\0\2\20\1\21\2\0\12\21\41\0\3\21\2\0\12\21"+
    "\6\0\130\20\10\0\51\20\1\21\1\20\5\0\106\20\12\0\35\20"+
    "\3\0\14\21\4\0\14\21\12\0\12\21\36\20\2\0\5\20\13\0"+
    "\54\20\4\0\21\21\7\20\2\21\6\0\12\21\46\0\27\20\5\21"+
    "\4\0\65\20\12\21\1\0\35\21\2\0\13\21\6\0\12\21\15\0"+
    "\1\20\130\0\5\21\57\20\21\21\7\20\4\0\12\21\21\0\11\21"+
    "\14\0\3\21\36\20\15\21\2\20\12\21\54\20\16\21\14\0\44\20"+
    "\24\21\10\0\12\21\3\0\3\20\12\21\44\20\122\0\3\21\1\0"+
    "\25\21\4\20\1\21\4\20\3\21\2\20\11\0\300\20\47\21\25\0"+
    "\4\21\u0116\20\2\0\6\20\2\0\46\20\2\0\6\20\2\0\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\37\20\2\0\65\20"+
    "\1\0\7\20\1\0\1\20\3\0\3\20\1\0\7\20\3\0\4\20"+
    "\2\0\6\20\4\0\15\20\5\0\3\20\1\0\7\20\16\0\5\21"+
    "\14\0\1\25\1\26\12\0\1\23\1\23\5\21\20\0\2\20\23\0"+
    "\1\20\13\0\5\21\5\0\6\21\1\0\1\20\15\0\1\20\20\0"+
    "\15\20\3\0\33\20\25\0\15\21\4\0\1\21\3\0\14\21\21\0"+
    "\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\4\20\1\0\13\20\2\0"+
    "\4\20\5\0\5\20\4\0\1\20\21\0\51\20\u0a77\0\57\20\1\0"+
    "\57\20\1\0\205\20\6\0\4\20\3\21\2\20\14\0\46\20\1\0"+
    "\1\20\5\0\1\20\2\0\70\20\7\0\1\20\17\0\1\21\27\20"+
    "\11\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\40\21\57\0\1\20"+
    "\u01d5\0\3\20\31\0\11\20\6\21\1\0\5\20\2\0\5\20\4\0"+
    "\126\20\2\0\2\21\2\0\3\20\1\0\132\20\1\0\4\20\5\0"+
    "\51\20\3\0\136\20\21\0\33\20\65\0\20\20\u0200\0\u19b6\20\112\0"+
    "\u51cd\20\63\0\u048d\20\103\0\56\20\2\0\u010d\20\3\0\20\20\12\21"+
    "\2\20\24\0\57\20\1\21\4\0\12\21\1\0\31\20\7\0\1\21"+
    "\120\20\2\21\45\0\11\20\2\0\147\20\2\0\4\20\1\0\4\20"+
    "\14\0\13\20\115\0\12\20\1\21\3\20\1\21\4\20\1\21\27\20"+
    "\5\21\20\0\1\20\7\0\64\20\14\0\2\21\62\20\21\21\13\0"+
    "\12\21\6\0\22\21\6\20\3\0\1\20\4\0\12\21\34\20\10\21"+
    "\2\0\27\20\15\21\14\0\35\20\3\0\4\21\57\20\16\21\16\0"+
    "\1\20\12\21\46\0\51\20\16\21\11\0\3\20\1\21\10\20\2\21"+
    "\2\0\12\21\6\0\27\20\3\0\1\20\1\21\4\0\60\20\1\21"+
    "\1\20\3\21\2\20\2\21\5\20\2\21\1\20\1\21\1\20\30\0"+
    "\3\20\2\0\13\20\5\21\2\0\3\20\2\21\12\0\6\20\2\0"+
    "\6\20\2\0\6\20\11\0\7\20\1\0\7\20\221\0\43\20\10\21"+
    "\1\0\2\21\2\0\12\21\6\0\u2ba4\20\14\0\27\20\4\0\61\20"+
    "\u2104\0\u016e\20\2\0\152\20\46\0\7\20\14\0\5\20\5\0\1\20"+
    "\1\21\12\20\1\0\15\20\1\0\5\20\1\0\1\20\1\0\2\20"+
    "\1\0\2\20\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0\66\20"+
    "\50\0\15\20\3\0\20\21\20\0\7\21\14\0\2\20\30\0\3\20"+
    "\31\0\1\20\6\0\5\20\1\0\207\20\2\0\1\21\4\0\1\20"+
    "\13\0\12\21\7\0\32\20\4\0\1\20\1\0\32\20\13\0\131\20"+
    "\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0\2\20"+
    "\3\0\2\20\22\0\3\21\4\0\14\20\1\0\32\20\1\0\23\20"+
    "\1\0\2\20\1\0\17\20\2\0\16\20\42\0\173\20\105\0\65\20"+
    "\210\0\1\21\202\0\35\20\3\0\61\20\57\0\37\20\21\0\33\20"+
    "\65\0\36\20\2\0\44\20\4\0\10\20\1\0\5\20\52\0\236\20"+
    "\2\0\12\21\u0356\0\6\20\2\0\1\20\1\0\54\20\1\0\2\20"+
    "\3\0\1\20\2\0\27\20\252\0\26\20\12\0\32\20\106\0\70\20"+
    "\6\0\2\20\100\0\1\20\3\21\1\0\2\21\5\0\4\21\4\20"+
    "\1\0\3\20\1\0\33\20\4\0\3\21\4\0\1\21\40\0\35\20"+
    "\203\0\66\20\12\0\26\20\12\0\23\20\215\0\111\20\u03b7\0\3\21"+
    "\65\20\17\21\37\0\12\21\20\0\3\21\55\20\13\21\2\0\1\21"+
    "\22\0\31\20\7\0\12\21\6\0\3\21\44\20\16\21\1\0\12\21"+
    "\100\0\3\21\60\20\16\21\4\20\13\0\12\21\u04a6\0\53\20\15\21"+
    "\10\0\12\21\u0936\0\u036f\20\221\0\143\20\u0b9d\0\u042f\20\u33d1\0\u0239\20"+
    "\u04c7\0\105\20\13\0\1\20\56\21\20\0\4\21\15\20\u4060\0\2\20"+
    "\u2163\0\5\21\3\0\26\21\2\0\7\21\36\0\4\21\224\0\3\21"+
    "\u01bb\0\125\20\1\0\107\20\1\0\2\20\2\0\1\20\2\0\2\20"+
    "\2\0\4\20\1\0\14\20\1\0\1\20\1\0\7\20\1\0\101\20"+
    "\1\0\4\20\2\0\10\20\1\0\7\20\1\0\34\20\1\0\4\20"+
    "\1\0\5\20\1\0\1\20\3\0\7\20\1\0\u0154\20\2\0\31\20"+
    "\1\0\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0\31\20"+
    "\1\0\37\20\1\0\31\20\1\0\37\20\1\0\31\20\1\0\10\20"+
    "\2\0\62\21\u1600\0\4\20\1\0\33\20\1\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\12\20\1\0\4\20\1\0\1\20\1\0\1\20"+
    "\6\0\1\20\4\0\1\20\1\0\1\20\1\0\1\20\1\0\3\20"+
    "\1\0\2\20\1\0\1\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\2\20\1\0\1\20\2\0\4\20"+
    "\1\0\7\20\1\0\4\20\1\0\4\20\1\0\1\20\1\0\12\20"+
    "\1\0\21\20\5\0\3\20\1\0\5\20\1\0\21\20\u1144\0\ua6d7\20"+
    "\51\0\u1035\20\13\0\336\20\u3fe2\0\u021e\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\21\36\0\140\21\200\0\360\21\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\2\1\1\4\1\1"+
    "\2\5\1\6\1\5\2\1\1\2\1\5\1\7\1\1"+
    "\1\10\1\11\1\12\1\1\10\0\1\2\1\5\5\0"+
    "\1\13\3\0\1\13\2\0\1\2\1\7\1\0\1\10"+
    "\1\11\1\12\4\0\1\14\2\0\2\15\2\0\2\16"+
    "\1\2\1\5\2\17\2\6\2\15\5\0\1\20\1\0"+
    "\1\2\1\0\1\21\3\0\1\22\1\21\1\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\106\0\43\0\151\0\214\0\257"+
    "\0\322\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7"+
    "\0\u01ea\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df"+
    "\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7"+
    "\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04c9\0\u04ec"+
    "\0\u050f\0\u01a4\0\u01a4\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be"+
    "\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6"+
    "\0\u06f9\0\u071c\0\43\0\u073f\0\u0762\0\u0785\0\u036b\0\u038e"+
    "\0\u07a8\0\u07cb\0\43\0\u07ee\0\43\0\u0811\0\u04c9\0\u0834"+
    "\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\43\0\u0906\0\u06f9"+
    "\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e"+
    "\0\u0a41";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\10"+
    "\1\7\1\11\1\12\4\13\1\14\1\15\1\2\1\16"+
    "\2\0\1\17\2\2\2\7\1\20\1\21\1\22\1\23"+
    "\1\10\1\24\1\25\1\26\1\27\44\0\2\3\1\0"+
    "\1\3\25\0\1\3\16\0\1\30\20\0\1\31\1\32"+
    "\41\0\1\31\1\32\21\0\1\33\12\0\1\34\2\0"+
    "\1\35\1\0\1\31\1\32\1\0\1\36\3\0\1\33"+
    "\1\37\14\0\1\40\15\0\1\31\1\32\24\0\1\15"+
    "\1\41\6\15\2\0\1\15\2\0\1\42\1\43\2\0"+
    "\1\15\21\0\10\15\2\0\1\15\2\0\1\42\1\43"+
    "\2\0\1\15\36\0\1\44\1\45\24\0\10\15\2\0"+
    "\1\15\6\0\1\15\7\0\1\46\3\0\16\46\1\47"+
    "\2\0\2\46\1\50\1\51\12\46\1\52\3\0\17\52"+
    "\2\0\1\52\1\53\14\52\1\0\2\3\1\0\1\3"+
    "\2\0\1\54\2\0\1\55\7\0\1\34\2\0\1\35"+
    "\1\0\1\31\1\32\1\0\1\56\1\0\1\57\1\60"+
    "\1\54\1\61\1\62\1\63\1\64\12\0\10\15\2\0"+
    "\1\15\2\0\1\31\1\32\2\0\1\15\36\0\1\31"+
    "\1\32\1\0\1\57\11\0\2\65\24\0\1\31\1\32"+
    "\1\0\1\60\2\0\1\66\17\0\5\67\1\0\1\67"+
    "\6\0\1\31\1\32\1\0\1\61\1\67\36\0\1\31"+
    "\1\32\1\0\1\62\37\0\1\31\1\32\1\0\1\63"+
    "\20\0\1\70\16\0\1\31\1\32\12\0\6\71\1\72"+
    "\1\0\33\71\5\0\5\73\10\0\1\73\5\0\13\73"+
    "\5\0\5\74\10\0\1\74\5\0\13\74\7\0\1\75"+
    "\12\0\1\34\2\0\1\35\4\0\1\76\3\0\1\75"+
    "\1\37\3\0\1\34\3\0\16\34\1\77\2\0\16\34"+
    "\1\35\3\0\17\35\2\0\1\35\1\100\14\35\7\0"+
    "\1\54\12\0\1\34\2\0\1\35\4\0\1\36\3\0"+
    "\1\54\1\37\15\0\5\67\1\0\1\67\11\0\1\37"+
    "\1\67\7\0\1\40\1\101\1\5\40\40\12\0\2\15"+
    "\1\102\5\15\2\0\1\15\6\0\1\15\21\0\5\103"+
    "\36\0\5\104\43\0\1\105\42\0\1\106\23\0\1\46"+
    "\3\0\16\46\1\47\2\0\17\46\3\0\1\46\5\107"+
    "\10\46\1\107\2\0\3\46\13\107\1\46\3\0\1\46"+
    "\5\110\10\46\1\110\2\0\3\46\13\110\22\0\1\34"+
    "\2\0\1\35\4\0\1\54\23\0\1\111\30\0\2\3"+
    "\1\0\1\3\2\0\1\54\2\0\1\55\7\0\1\34"+
    "\2\0\1\35\4\0\1\56\1\0\1\57\1\60\1\54"+
    "\1\61\1\62\1\63\1\64\32\0\1\57\11\0\2\65"+
    "\27\0\1\60\2\0\1\66\17\0\5\67\1\0\1\67"+
    "\11\0\1\61\1\67\41\0\1\62\42\0\1\63\20\0"+
    "\1\70\33\0\2\65\27\0\1\112\2\0\1\66\6\0"+
    "\2\113\27\0\1\66\2\0\1\114\17\0\10\67\2\0"+
    "\1\67\5\0\1\115\1\67\1\116\40\0\1\70\10\0"+
    "\6\71\1\117\42\71\1\117\1\71\1\120\32\71\30\0"+
    "\1\32\21\0\1\75\22\0\1\121\3\0\1\75\1\37"+
    "\25\0\1\34\2\0\1\35\4\0\1\76\4\0\1\37"+
    "\5\0\1\5\52\0\3\15\1\122\4\15\2\0\1\15"+
    "\6\0\1\15\37\0\1\43\42\0\1\45\12\0\1\46"+
    "\3\0\16\46\1\47\2\0\3\46\1\51\12\46\14\0"+
    "\1\123\60\0\1\112\2\0\1\66\6\0\2\113\27\0"+
    "\1\124\2\0\1\114\6\0\2\125\27\0\1\114\2\0"+
    "\1\126\37\0\1\115\1\0\1\116\6\0\6\71\1\117"+
    "\1\71\1\5\32\71\32\0\1\121\4\0\1\37\15\0"+
    "\10\15\2\0\1\15\5\0\1\127\1\15\24\0\1\127"+
    "\57\0\1\124\2\0\1\114\6\0\2\125\27\0\1\130"+
    "\2\0\1\126\6\0\2\131\27\0\1\126\42\0\1\127"+
    "\42\0\1\130\2\0\1\126\6\0\2\131\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\22\1\10\0\2\1\5\0"+
    "\1\1\3\0\1\1\2\0\2\1\1\0\3\1\4\0"+
    "\1\1\2\0\1\11\1\1\2\0\4\1\1\11\1\1"+
    "\1\11\3\1\5\0\1\11\1\0\1\1\1\0\1\1"+
    "\3\0\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
      StringBuffer string = new StringBuffer();

      private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
      }
      private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2832) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1));
            //clase error
            } 
            // fall through
          case 19: break;
          case 2: 
            { /*Se ignoran*/
            } 
            // fall through
          case 20: break;
          case 3: 
            { yycolumn=1;
            } 
            // fall through
          case 21: break;
          case 4: 
            { //System.out.println("OPERADOR: "+yytext());
    return new Symbol(sym.operador,yycolumn,yyline,yytext());
            } 
            // fall through
          case 22: break;
          case 5: 
            { return new Symbol(sym.id,yycolumn,yyline,yytext());
            } 
            // fall through
          case 23: break;
          case 6: 
            { //System.out.println("NOTACION DIGITO: "+yytext());
    return new Symbol(sym.notacionD,yycolumn,yyline,yytext());
            } 
            // fall through
          case 24: break;
          case 7: 
            { return new Symbol(sym.lcierra,yycolumn,yyline,yytext());
            } 
            // fall through
          case 25: break;
          case 8: 
            { return new Symbol(sym.labre,yycolumn,yyline,yytext());
            } 
            // fall through
          case 26: break;
          case 9: 
            { return new Symbol(sym.pcoma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 27: break;
          case 10: 
            { return new Symbol(sym.dospuntos,yycolumn,yyline,yytext());
            } 
            // fall through
          case 28: break;
          case 11: 
            { //System.out.println("LEXEMA: "+yytext());
    return new Symbol(sym.lexema,yycolumn,yyline,yytext());
            } 
            // fall through
          case 29: break;
          case 12: 
            { return new Symbol(sym.deriva,yycolumn,yyline,yytext());
            } 
            // fall through
          case 30: break;
          case 13: 
            { //System.out.println("NOTACION SIMBOLO: "+yytext());
    return new Symbol(sym.notacionA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 31: break;
          case 14: 
            { //System.out.println("VAR: "+yytext());
    return new Symbol(sym.var,yycolumn,yyline,yytext());
            } 
            // fall through
          case 32: break;
          case 15: 
            { //System.out.println("NOTACION LETRA: "+yytext());
    return new Symbol(sym.notacionL,yycolumn,yyline,yytext());
            } 
            // fall through
          case 33: break;
          case 16: 
            { //System.out.println("ENTRE LLAVES: "+yytext());
    return new Symbol(sym.conjunto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 34: break;
          case 17: 
            { return new Symbol(sym.prconj,yycolumn,yyline,yytext());
            } 
            // fall through
          case 35: break;
          case 18: 
            { return new Symbol(sym.porcentajes,yycolumn,yyline,yytext());
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
