package Analizadores;
import java_cup.runtime.*;
import GUI.Interfaz;
import Modelos.*;

parser code
{:  
    public static int id = 100;
    public static int aux = 1;
    public static NodoTree raiz;
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        if (s.value!=null){
            GUI.Interfaz.texto_consola+="<<<Errores sintácticos encontrados>>>\n";
            Errores.lista_errores.add(new Errores("Sintáctico", (String) s.value, (s.right+1), (s.left+1)));
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

terminal String prconj, pcoma, dospuntos, labre, lcierra, porcentajes, id, lexema, notacionL, notacionD, notacionA, deriva, operador, multiplicativo, conjuntoo, especial;

non terminal String INICIO, EXP, SENTENCIA, EXPRESION, NOTACION, CONJUNTO, INFIJA;
non terminal NodoTree DEF, OPM;

start with INICIO;

INICIO::= EXP {::};

EXP::= labre SENTENCIA porcentajes EXPRESION:e lcierra {::};

SENTENCIA::= SENTENCIA CONJUNTO pcoma {::}
            | SENTENCIA INFIJA pcoma    {:
                                        :}
            | CONJUNTO pcoma            {:
                                        :}
            | INFIJA:r pcoma            {: 
                                        :};

CONJUNTO ::= prconj dospuntos id deriva NOTACION {::};

NOTACION ::= notacionL {::}
            | notacionA {::}
            | notacionD {::};

INFIJA ::= id:name deriva DEF:s     {:  if (Interfaz.funcion == "GENERAR AUTOMATAS") {
                                            NodoTree nodoNum = new NodoTree(parser.id, "#", null, null);
                                            parser.id++;
                                            NodoTree nodoI = new NodoTree(parser.id, ".", s, nodoNum);
                                            parser.id++;
                                            Expresiones.setName(name);
                                            Expresiones.loadExp();
                                            parser.raiz = nodoI;
                                            TREE arbol = new TREE(parser.raiz, name);
                                            Interfaz.texto_consola+="Autómatas generados para la expresión: "+name+"\n";
                                        }
                                    :};

DEF::= DEF:a OPM    {:
                        RESULT = a;
                    :}
    | OPM:n         {: 
                        RESULT = n;
                    :};


OPM::=  multiplicativo:m OPM:o      {:  if (Interfaz.funcion == "GENERAR AUTOMATAS") {
                                            //Expresiones.add(m);
                                            NodoTree nodo = new NodoTree(parser.id, m, o, null);
                                            parser.id++;
                                            RESULT = nodo;
                                        }
                                    :}

        | operador:o OPM:a OPM:b    {:  if (Interfaz.funcion == "GENERAR AUTOMATAS") {
                                            //Expresiones.add(o);
                                            NodoTree nodo = new NodoTree(parser.id, o, a, b);
                                            parser.id++;
                                            RESULT = nodo;
                                        }
                                    :}
        | lexema:b              {:  if (Interfaz.funcion == "GENERAR AUTOMATAS") {
                                        //Expresiones.add(b);
                                        NodoTree nodo = new NodoTree(parser.aux, b, null, null);
                                        parser.aux++;
                                        RESULT = nodo;
                                    }
                                :}
        | conjuntoo:a           {:  if (Interfaz.funcion == "GENERAR AUTOMATAS") {
                                        //Expresiones.add(a);
                                        NodoTree nodo = new NodoTree(parser.aux, a, null, null);
                                        parser.aux++;
                                        RESULT = nodo;
                                    }
                                :}
        | especial: c           {:  if (Interfaz.funcion == "GENERAR AUTOMATAS") {
                                        //Expresiones.add(c);
                                        NodoTree nodo = new NodoTree(parser.aux, c, null, null);
                                        parser.aux++;
                                        RESULT = nodo;
                                    }
                                :};


EXPRESION::= EXPRESION id:a dospuntos lexema pcoma  {:  if (Interfaz.funcion == "ANALIZAR ENTRADAS") {
                                                            Interfaz.texto_consola+="Expresión reconocida: "+a+"\n";
                                                            
                                                            
                                                            Interfaz.texto_consola+="JSON de salida generado: "+a+"\n";
                                                        }
                                                    :}
            | id:b dospuntos lexema pcoma   {:  if (Interfaz.funcion == "ANALIZAR ENTRADAS") {
                                                    Interfaz.texto_consola+="Expresión reconocida: "+b+"\n";
                                                    
                                                    
                                                    Interfaz.texto_consola+="JSON de salida generado: "+b+"\n";
                                                }
                                            :};

