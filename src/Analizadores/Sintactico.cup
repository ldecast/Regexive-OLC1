package Analizadores;
import java_cup.runtime.*;
import GUI.Interfaz;
import Modelos.Errores;

parser code
{:  
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        if (s.value!=null){
            GUI.Interfaz.texto_consola+="<<<Errores sintácticos encontrados>>>\n";
            Modelos.Errores.lista_errores.add(new Errores("Sintáctico", (String) s.value, (s.right+1), (s.left+1)));
        }
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Línea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8
:}

action code {:
:}

terminal String prconj, pcoma, dospuntos, labre, lcierra, porcentajes, id, lexema, notacionL, notacionD, notacionA, deriva, operador, multiplicativo, conjunto; //, var;

non terminal String INICIO, EXP, SENTENCIA, EXPRESION, NOTACION, CONJUNTO, INFIJA, DEF, AUX, OPM;

start with INICIO;

INICIO::= EXP {::};

EXP::= labre SENTENCIA porcentajes EXPRESION:e lcierra {::};

SENTENCIA::= SENTENCIA CONJUNTO pcoma {::}
            | SENTENCIA INFIJA pcoma {:Modelos.Expresiones.loadExp();:}
            | CONJUNTO pcoma {::}
            | INFIJA pcoma {:Modelos.Expresiones.loadExp();:};

CONJUNTO ::= prconj dospuntos id deriva NOTACION {::};

NOTACION ::= notacionL {::}
            | notacionA {::}
            | notacionD {::};

INFIJA ::= id:name deriva DEF {:Modelos.Expresiones.setName(name);:};

DEF::= DEF OPM AUX {::}
    | OPM AUX {::}
    | DEF AUX {::}
    | AUX {::};

OPM::= multiplicativo:m operador:o {:if(m!=null) Modelos.Expresiones.add(m); if(o!=null) Modelos.Expresiones.add(o);:}
    | multiplicativo:m {:if(m!=null) Modelos.Expresiones.add(m);:}
    | operador:o {:if(o!=null) Modelos.Expresiones.add(o);:};

AUX::= conjunto:a {:if(a!=null) Modelos.Expresiones.add(a);:}
    | lexema:b {:if(b!=null) Modelos.Expresiones.add(b);:};

EXPRESION::= EXPRESION id:a dospuntos lexema pcoma {:GUI.Interfaz.texto_consola+="Expresión reconocida: "+a+"\n";:}
            | id:b dospuntos lexema pcoma {:GUI.Interfaz.texto_consola+="Expresión reconocida: "+b+"\n";:};
